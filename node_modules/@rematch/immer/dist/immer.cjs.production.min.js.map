{"version":3,"file":"immer.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { Plugin, Models } from '@rematch/core'\nimport produce from 'immer'\nimport Redux from 'redux'\n\nexport type ImmerPluginConfig = {\n\twhitelist?: string[]\n\tblacklist?: string[]\n}\n\nfunction wrapReducerWithImmer(reducer: Redux.Reducer) {\n\treturn (state: any, payload: any): any => {\n\t\tif (state === undefined) return reducer(state, payload)\n\t\treturn produce(state, (draft: any) => reducer(draft, payload))\n\t}\n}\n\nconst immerPlugin = <\n\tTModels extends Models<TModels>,\n\tTExtraModels extends Models<TModels> = Record<string, never>\n>(\n\tconfig?: ImmerPluginConfig\n): Plugin<TModels, TExtraModels> => ({\n\tonReducer(reducer: Redux.Reducer, model: string): Redux.Reducer | void {\n\t\tif (\n\t\t\t!config ||\n\t\t\t(!config.whitelist && !config.blacklist) ||\n\t\t\t(config.whitelist && config.whitelist.includes(model)) ||\n\t\t\t(config.blacklist && !config.blacklist.includes(model))\n\t\t) {\n\t\t\treturn wrapReducerWithImmer(reducer)\n\t\t}\n\n\t\treturn undefined\n\t},\n})\n\nexport default immerPlugin\n"],"names":["config","onReducer","reducer","model","whitelist","blacklist","includes","state","payload","undefined","produce","draft","wrapReducerWithImmer"],"mappings":"sLAgBoB,SAInBA,SACoC,CACpCC,mBAAUC,EAAwBC,OAE/BH,IACCA,EAAOI,YAAcJ,EAAOK,WAC7BL,EAAOI,WAAaJ,EAAOI,UAAUE,SAASH,IAC9CH,EAAOK,YAAcL,EAAOK,UAAUC,SAASH,UAlBnD,SAA8BD,UACtB,SAACK,EAAYC,eACLC,IAAVF,EAA4BL,EAAQK,EAAOC,GACxCE,UAAQH,GAAO,SAACI,UAAeT,EAAQS,EAAOH,OAiB7CI,CAAqBV"}