{"version":3,"file":"transform-union.js","names":["transformUnion","field","fieldName","pluginOptions","prefix","schema","typePrefix","type","buildTypeName","name","resolve","source","_","context","resolvedField","id","gatsbyNode","nodeModel","getNodeById","transformListOfUnions","typeSDLString","introspectionFieldTypeToSDL","length","reduce","accumulator","item","node","__typename","push"],"sources":["../../../../src/steps/create-schema-customization/transform-fields/transform-union.js"],"sourcesContent":["import { buildTypeName } from \"~/steps/create-schema-customization/helpers\"\nimport { introspectionFieldTypeToSDL } from \"../helpers\"\n\nexport const transformUnion = ({ field, fieldName, pluginOptions }) => {\n  const prefix = pluginOptions.schema.typePrefix\n  return {\n    type: buildTypeName(field.type.name, prefix),\n    resolve: (source, _, context) => {\n      const resolvedField =\n        source[fieldName] ||\n        source[`${field.name}__typename_${field.type.name}`]\n\n      if (resolvedField && resolvedField.id) {\n        const gatsbyNode = context.nodeModel.getNodeById({\n          id: resolvedField.id,\n          type: resolvedField.type,\n        })\n\n        if (gatsbyNode) {\n          return gatsbyNode\n        }\n      }\n\n      return resolvedField ?? null\n    },\n  }\n}\n\nexport const transformListOfUnions = ({ field, fieldName, pluginOptions }) => {\n  const prefix = pluginOptions.schema.typePrefix\n  const typeSDLString = introspectionFieldTypeToSDL(field.type)\n\n  return {\n    type: typeSDLString,\n    resolve: (source, _, context) => {\n      const resolvedField =\n        source[fieldName] ??\n        source[`${field.name}__typename_${field.type.name}`]\n\n      if (\n        (!resolvedField && resolvedField !== false) ||\n        !resolvedField.length\n      ) {\n        return null\n      }\n\n      return resolvedField.reduce((accumulator, item) => {\n        const node = item?.id\n          ? context.nodeModel.getNodeById({\n              id: item.id,\n              type: buildTypeName(item.__typename, prefix),\n            })\n          : null\n\n        if (node) {\n          accumulator.push(node)\n        } else if (item && !item.id) {\n          accumulator.push(item)\n        }\n\n        return accumulator\n      }, [])\n    },\n  }\n}\n"],"mappings":";;;;AAAA;AAGO,MAAMA,cAAc,GAAG,CAAC;EAAEC,KAAK;EAAEC,SAAS;EAAEC;AAAc,CAAC,KAAK;EACrE,MAAMC,MAAM,GAAGD,aAAa,CAACE,MAAM,CAACC,UAAU;EAC9C,OAAO;IACLC,IAAI,EAAE,IAAAC,sBAAa,EAACP,KAAK,CAACM,IAAI,CAACE,IAAI,EAAEL,MAAM,CAAC;IAC5CM,OAAO,EAAE,CAACC,MAAM,EAAEC,CAAC,EAAEC,OAAO,KAAK;MAC/B,MAAMC,aAAa,GACjBH,MAAM,CAACT,SAAS,CAAC,IACjBS,MAAM,CAAE,GAAEV,KAAK,CAACQ,IAAK,cAAaR,KAAK,CAACM,IAAI,CAACE,IAAK,EAAC,CAAC;MAEtD,IAAIK,aAAa,IAAIA,aAAa,CAACC,EAAE,EAAE;QACrC,MAAMC,UAAU,GAAGH,OAAO,CAACI,SAAS,CAACC,WAAW,CAAC;UAC/CH,EAAE,EAAED,aAAa,CAACC,EAAE;UACpBR,IAAI,EAAEO,aAAa,CAACP;QACtB,CAAC,CAAC;QAEF,IAAIS,UAAU,EAAE;UACd,OAAOA,UAAU;QACnB;MACF;MAEA,OAAOF,aAAa,aAAbA,aAAa,cAAbA,aAAa,GAAI,IAAI;IAC9B;EACF,CAAC;AACH,CAAC;AAAA;AAEM,MAAMK,qBAAqB,GAAG,CAAC;EAAElB,KAAK;EAAEC,SAAS;EAAEC;AAAc,CAAC,KAAK;EAC5E,MAAMC,MAAM,GAAGD,aAAa,CAACE,MAAM,CAACC,UAAU;EAC9C,MAAMc,aAAa,GAAG,IAAAC,oCAA2B,EAACpB,KAAK,CAACM,IAAI,CAAC;EAE7D,OAAO;IACLA,IAAI,EAAEa,aAAa;IACnBV,OAAO,EAAE,CAACC,MAAM,EAAEC,CAAC,EAAEC,OAAO,KAAK;MAAA;MAC/B,MAAMC,aAAa,wBACjBH,MAAM,CAACT,SAAS,CAAC,iEACjBS,MAAM,CAAE,GAAEV,KAAK,CAACQ,IAAK,cAAaR,KAAK,CAACM,IAAI,CAACE,IAAK,EAAC,CAAC;MAEtD,IACG,CAACK,aAAa,IAAIA,aAAa,KAAK,KAAK,IAC1C,CAACA,aAAa,CAACQ,MAAM,EACrB;QACA,OAAO,IAAI;MACb;MAEA,OAAOR,aAAa,CAACS,MAAM,CAAC,CAACC,WAAW,EAAEC,IAAI,KAAK;QACjD,MAAMC,IAAI,GAAGD,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEV,EAAE,GACjBF,OAAO,CAACI,SAAS,CAACC,WAAW,CAAC;UAC5BH,EAAE,EAAEU,IAAI,CAACV,EAAE;UACXR,IAAI,EAAE,IAAAC,sBAAa,EAACiB,IAAI,CAACE,UAAU,EAAEvB,MAAM;QAC7C,CAAC,CAAC,GACF,IAAI;QAER,IAAIsB,IAAI,EAAE;UACRF,WAAW,CAACI,IAAI,CAACF,IAAI,CAAC;QACxB,CAAC,MAAM,IAAID,IAAI,IAAI,CAACA,IAAI,CAACV,EAAE,EAAE;UAC3BS,WAAW,CAACI,IAAI,CAACH,IAAI,CAAC;QACxB;QAEA,OAAOD,WAAW;MACpB,CAAC,EAAE,EAAE,CAAC;IACR;EACF,CAAC;AACH,CAAC;AAAA"}