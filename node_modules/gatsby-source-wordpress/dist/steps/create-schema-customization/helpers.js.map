{"version":3,"file":"helpers.js","names":["buildInterfacesListForType","type","shouldAddNodeType","list","interfaces","filter","interfaceType","interfaceTypeSettings","getTypeSettingsByType","exclude","fieldOfTypeWasFetched","map","name","buildTypeName","push","ceIntCache","isWpgqlOneThirteenZeroPlus","typeMap","getStore","getState","remoteSchema","connectionInterface","get","edgeInterface","prefix","getPluginOptions","schema","typePrefix","endsWith","startsWith","findTypeKind","kind","ofType","findNamedType","findNamedTypeName","namedType","fetchedTypes","typeName","typeWasFetched","implementingTypeCache","Map","getTypesThatImplementInterfaceType","has","state","allTypes","values","implementingTypes","Array","from","find","singleInterface","possibleTypes","length","set","supportedScalars","typeIsABuiltInScalar","includes","typeIsASupportedScalar","typeSettingCache","cachedTypeSettings","allTypeSettings","gatsbyApi","pluginOptions","typeSettings","__allTypeSetting","__all","limit","mergedSettings","filterTypeDefinition","typeDefinition","typeBuilderApi","typeKind","filters","typeDefinitionFilters","forEach","typeDef","introspectionFieldTypeToSDL","fieldType","openingTagsList","closingTagsList","reference","normalizedTypeName","join","reverse","mergeDuplicateTypesAndReturnDedupedList","typeDefs","clonedDefs","newList","def","duplicateDefs","d","config","newDef","dDef","diffBuiltTypeDefs","process","env","NODE_ENV","WP_DIFF_SCHEMA_CUSTOMIZATION","helpers","cache","reporter","previousTypeDefsKey","withPluginKey","previousTypeDefinitions","typeDefString","JSON","stringify","typeNames","remoteSchemaChanged","schemaHash","missingTypeNames","previousTypeDefJson","parse","newParsedTypeDefs","changedTypeDefs","previousTypeDef","isDifferent","diffString","full","Boolean","errorMessage","formatLogMessage","maxErrorLength","substring","WP_INCONSISTENT_SCHEMA_WARN","info","panic","id","CODES","InconsistentSchemaCustomization","context","sourceMessage","warn"],"sources":["../../../src/steps/create-schema-customization/helpers.js"],"sourcesContent":["import { getStore, withPluginKey } from \"~/store\"\nimport { typeDefinitionFilters } from \"./type-filters\"\nimport { getPluginOptions } from \"~/utils/get-gatsby-api\"\nimport { cloneDeep, merge } from \"lodash\"\nimport { diffString } from \"json-diff\"\nimport { formatLogMessage } from \"../../utils/format-log-message\"\nimport { CODES } from \"../../utils/report\"\n\nexport const buildInterfacesListForType = type => {\n  let shouldAddNodeType = false\n\n  const list = (type?.interfaces || [])\n    .filter(interfaceType => {\n      const interfaceTypeSettings = getTypeSettingsByType(interfaceType)\n\n      return (\n        !interfaceTypeSettings.exclude && fieldOfTypeWasFetched(interfaceType)\n      )\n    })\n    .map(({ name }) => {\n      if (name === `Node`) {\n        shouldAddNodeType = true\n      }\n      return buildTypeName(name)\n    })\n\n  if (shouldAddNodeType) {\n    list.push(`Node`)\n  }\n\n  return list\n}\n\nlet ceIntCache = null\nconst isWpgqlOneThirteenZeroPlus = () => {\n  if (ceIntCache !== null) {\n    return ceIntCache\n  }\n\n  const { typeMap } = getStore().getState().remoteSchema\n\n  const connectionInterface = !!typeMap.get(`Connection`)\n  const edgeInterface = !!typeMap.get(`Edge`)\n\n  const isWpgqlOneThirteenZeroPlus = connectionInterface || edgeInterface\n\n  ceIntCache = isWpgqlOneThirteenZeroPlus\n\n  return isWpgqlOneThirteenZeroPlus\n}\n\n/**\n * This function namespaces typenames with a prefix\n */\nexport const buildTypeName = (name, prefix) => {\n  if (!name || typeof name !== `string`) {\n    return null\n  }\n\n  if (!prefix) {\n    prefix = getPluginOptions().schema.typePrefix\n  }\n\n  // this is for our namespace type on the root { wp { ...fields } }\n  if (name === prefix) {\n    return name\n  }\n\n  // Gatsby makes the same type, so we need to rename it to prevent conflicts\n  if (name === `Filter`) {\n    name = `FilterType`\n  }\n\n  if (\n    // Starting in WPGraphQL 1.13.0, Gatsby and WPGraphQL both generate types ending in these strings for every node type in the schema, so we need to rename types to prevent conflicts.\n    // for users on older versions of WPGraphQL we should try to keep the schema how it was before\n    isWpgqlOneThirteenZeroPlus() &&\n    (name.endsWith(`Connection`) ||\n      name.endsWith(`Edge`) ||\n      name.endsWith(`PageInfo`))\n  ) {\n    name += `Type`\n  }\n\n  if (name.startsWith(prefix)) {\n    return name\n  }\n\n  return prefix + name\n}\n\n/**\n * Find the first type kind of a Type definition pulled via introspection\n * @param {object} type\n */\nexport const findTypeKind = type => {\n  if (type?.kind) {\n    return type.kind\n  }\n\n  if (type?.ofType) {\n    return findTypeKind(type.ofType)\n  }\n\n  return null\n}\n\nexport const findNamedType = type => {\n  if (!type) {\n    return null\n  }\n\n  if (type.ofType) {\n    return findNamedType(type.ofType)\n  }\n\n  return type\n}\n\nexport const findNamedTypeName = type => {\n  const namedType = findNamedType(type)\n\n  return namedType?.name\n}\n\nexport const fieldOfTypeWasFetched = type => {\n  const { fetchedTypes } = getStore().getState().remoteSchema\n  const typeName = findNamedTypeName(type)\n  const typeWasFetched = !!fetchedTypes.get(typeName)\n\n  return typeWasFetched\n}\n\nconst implementingTypeCache = new Map()\n\nexport const getTypesThatImplementInterfaceType = type => {\n  if (implementingTypeCache.has(type.name)) {\n    return implementingTypeCache.get(type.name)\n  }\n\n  const state = getStore().getState()\n  const { typeMap } = state.remoteSchema\n\n  const allTypes = typeMap.values()\n\n  const implementingTypes = Array.from(allTypes)\n    .filter(\n      ({ interfaces }) =>\n        interfaces &&\n        // find types that implement this interface type\n        interfaces.find(singleInterface => singleInterface.name === type.name)\n    )\n    .map(type => typeMap.get(type.name))\n    .filter(\n      type =>\n        type.kind !== `UNION` ||\n        // if this is a union type, make sure the union type has one or more member types, otherwise schema customization will throw an error\n        (!!type.possibleTypes && !!type.possibleTypes.length)\n    )\n\n  implementingTypeCache.set(type.name, implementingTypes)\n\n  return implementingTypes\n}\n\nconst supportedScalars = [\n  `Int`,\n  `Float`,\n  `String`,\n  `Boolean`,\n  `ID`,\n  `Date`,\n  `JSON`,\n]\n\nexport const typeIsABuiltInScalar = type =>\n  // @todo the next function and this one are redundant.\n  // see the next todo on how to fix the issue. If that todo is resolved, these functions will be identical. :(\n  supportedScalars.includes(findNamedTypeName(type))\n\nexport const typeIsASupportedScalar = type => {\n  if (findTypeKind(type) !== `SCALAR`) {\n    // @todo returning true here seems wrong since a type that is not a scalar can't be a supported scalar... so there is some other logic elsewhere that is wrong\n    // making this return false causes errors in the schema\n    return true\n  }\n\n  return supportedScalars.includes(findNamedTypeName(type))\n}\n\nconst typeSettingCache = new Map()\n\n// retrieves plugin settings for the provided type\nexport const getTypeSettingsByType = type => {\n  if (!type) {\n    return {}\n  }\n\n  const typeName = findNamedTypeName(type)\n\n  if (!typeName) {\n    return {}\n  }\n\n  const cachedTypeSettings = typeSettingCache.get(typeName)\n\n  if (cachedTypeSettings) {\n    return cachedTypeSettings\n  }\n\n  // the plugin options object containing every type setting\n  const allTypeSettings = getStore().getState().gatsbyApi.pluginOptions.type\n\n  const typeSettings = cloneDeep(allTypeSettings[typeName] || {})\n\n  // the type.__all plugin option which is applied to every type setting\n  const __allTypeSetting = cloneDeep(allTypeSettings.__all || {})\n\n  if (typeName === `MediaItem`) {\n    delete __allTypeSetting.limit\n    delete typeSettings.limit\n  }\n\n  if (typeSettings) {\n    const mergedSettings = merge(__allTypeSetting, typeSettings)\n\n    typeSettingCache.set(typeName, mergedSettings)\n\n    return mergedSettings\n  }\n\n  typeSettingCache.set(typeName, __allTypeSetting)\n\n  return __allTypeSetting\n}\n\n/**\n * This is used to filter the automatically generated type definitions before they're added to the schema customization api.\n */\nexport const filterTypeDefinition = (\n  typeDefinition,\n  typeBuilderApi,\n  typeKind\n) => {\n  const filters = typeDefinitionFilters.filter(filter =>\n    [typeBuilderApi.type.name, `__all`].includes(filter.typeName)\n  )\n\n  if (filters?.length) {\n    filters.forEach(filter => {\n      if (filter && typeof filter.typeDef === `function`) {\n        typeDefinition = filter.typeDef(\n          typeDefinition,\n          typeBuilderApi,\n          typeKind\n        )\n      }\n    })\n  }\n\n  return typeDefinition\n}\n\n// we should be using graphql-js for this kind of thing, but unfortunately this project didn't use it from the beginning so it would be a huge lift to refactor to use it now. In the future we will be rewriting this plugin using a new Gatsby source plugin toolkit, and at that time we'll use graphql-js.\n// from introspection field types this will return a value like:\n// `String` or `[String]` or `[String!]!` or `[String]!` or `[[String]]` or `[[String]!]!` or `[[String]!]`, etc\nexport const introspectionFieldTypeToSDL = fieldType => {\n  const openingTagsList = []\n  const closingTagsList = []\n\n  let reference = fieldType\n\n  while (reference) {\n    switch (reference.kind) {\n      case `SCALAR`: {\n        const normalizedTypeName = supportedScalars.includes(reference.name)\n          ? reference.name\n          : `JSON`\n\n        openingTagsList.push(normalizedTypeName)\n        break\n      }\n      case `OBJECT`:\n      case `INTERFACE`:\n      case `UNION`:\n        openingTagsList.push(buildTypeName(reference.name))\n        break\n      case `NON_NULL`:\n        closingTagsList.push(`!`)\n        break\n      case `LIST`:\n        openingTagsList.push(`[`)\n        closingTagsList.push(`]`)\n        break\n      default:\n        break\n    }\n\n    reference = reference.ofType\n  }\n\n  return openingTagsList.join(``) + closingTagsList.reverse().join(``)\n}\n\n/**\n * This is an expensive fn but it doesn't matter because it's only to show a debugging warning message when something is wrong.\n */\nfunction mergeDuplicateTypesAndReturnDedupedList(typeDefs) {\n  const clonedDefs = cloneDeep(typeDefs)\n\n  const newList = []\n\n  for (const def of clonedDefs) {\n    if (!def) {\n      continue\n    }\n\n    const duplicateDefs = clonedDefs.filter(\n      d => d.config.name === def.config.name\n    )\n\n    const newDef = {}\n\n    for (const dDef of duplicateDefs) {\n      merge(newDef, dDef)\n    }\n\n    newList.push(newDef)\n  }\n\n  return newList\n}\n\n/**\n * Diffs the built types between this build and the last one with the same remote schema hash.\n * This is to catch and add helpful error messages for when an inconsistent schema between builds is inadvertently created due to some bug\n */\nexport async function diffBuiltTypeDefs(typeDefs) {\n  if (\n    process.env.NODE_ENV !== `development` &&\n    process.env.WP_DIFF_SCHEMA_CUSTOMIZATION !== `true`\n  ) {\n    return\n  }\n\n  const state = getStore().getState()\n\n  const {\n    gatsbyApi: {\n      helpers: { cache, reporter },\n    },\n    remoteSchema,\n  } = state\n\n  const previousTypeDefsKey = withPluginKey(`previousTypeDefinitions`)\n\n  const previousTypeDefinitions = await cache.get(previousTypeDefsKey)\n  const typeDefString = JSON.stringify(typeDefs)\n  const typeNames = typeDefs.map(typeDef => typeDef.config.name)\n\n  const remoteSchemaChanged =\n    !previousTypeDefinitions ||\n    previousTypeDefinitions?.schemaHash !== remoteSchema.schemaHash\n\n  if (remoteSchemaChanged) {\n    await cache.set(previousTypeDefsKey, {\n      schemaHash: remoteSchema.schemaHash,\n      typeDefString,\n      typeNames,\n    })\n    return\n  }\n\n  // type defs are the same as last time, so don't check for missing/inconsistent types\n  if (previousTypeDefinitions?.typeDefString === typeDefString) {\n    return\n  }\n\n  const missingTypeNames = previousTypeDefinitions.typeNames.filter(\n    name => !typeNames.includes(name)\n  )\n\n  const previousTypeDefJson = mergeDuplicateTypesAndReturnDedupedList(\n    JSON.parse(previousTypeDefinitions.typeDefString)\n  )\n\n  const newParsedTypeDefs = mergeDuplicateTypesAndReturnDedupedList(\n    JSON.parse(typeDefString)\n  )\n\n  const changedTypeDefs = newParsedTypeDefs\n    .map(typeDef => {\n      const previousTypeDef = previousTypeDefJson.find(\n        previousTypeDef => previousTypeDef.config.name === typeDef.config.name\n      )\n\n      const isDifferent = diffString(previousTypeDef, typeDef)\n\n      if (isDifferent) {\n        return `Typename ${typeDef.config.name} diff:\\n${diffString(\n          previousTypeDef,\n          typeDef,\n          {\n            // diff again to also show unchanged lines\n            full: true,\n          }\n        )}`\n      }\n\n      return null\n    })\n    .filter(Boolean)\n\n  let errorMessage = formatLogMessage(\n    `The remote WPGraphQL schema hasn't changed but local generated type definitions have. This is a bug, please open an issue on Github${\n      missingTypeNames.length || changedTypeDefs.length\n        ? ` and include the following text.`\n        : ``\n    }.${\n      missingTypeNames.length\n        ? `\\n\\nMissing type names: ${missingTypeNames.join(`\\n`)}\\n`\n        : ``\n    }${\n      changedTypeDefs.length\n        ? `\\n\\nChanged type defs:\\n\\n${changedTypeDefs.join(`\\n`)}`\n        : ``\n    }`\n  )\n\n  const maxErrorLength = 5000\n\n  if (errorMessage.length > maxErrorLength) {\n    errorMessage =\n      errorMessage.substring(0, maxErrorLength) +\n      `\\n\\n...\\n[Diff exceeded ${maxErrorLength} characters and was truncated]`\n  }\n\n  if (process.env.WP_INCONSISTENT_SCHEMA_WARN !== `true`) {\n    reporter.info(\n      formatLogMessage(\n        `Panicking due to inconsistent schema customization. Turn this into a warning by setting process.env.WP_INCONSISTENT_SCHEMA_WARN to a string of \"true\"`\n      )\n    )\n    reporter.panic({\n      id: CODES.InconsistentSchemaCustomization,\n      context: {\n        sourceMessage: errorMessage,\n      },\n    })\n  } else {\n    reporter.warn(errorMessage)\n  }\n}\n"],"mappings":"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"}