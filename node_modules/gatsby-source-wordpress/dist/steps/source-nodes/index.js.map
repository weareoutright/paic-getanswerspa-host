{"version":3,"file":"index.js","names":["sourceNodes","helpers","pluginOptions","cache","webhookBody","refetchAll","actions","typePrefix","schema","hasStatefulSourceNodes","enableStatefulSourceNodes","nonNodeRootFieldsPromise","fetchAndCreateNonNodeRootFields","token","userDatabaseId","sourcePreviews","now","Date","prefixedSourceTimeKey","withPluginKey","LAST_COMPLETED_SOURCE_TIME","lastCompletedSourceTime","refreshing","since","get","schemaWasChanged","getStore","getState","remoteSchema","fetchEverything","process","env","NODE_ENV","fetchAndCreateAllNodes","fetchAndApplyNodeUpdates","allowFileDownloaderProgressBarToClear","set","dispatch","setSchemaWasChanged","develop","resumeRefreshPolling"],"sources":["../../../src/steps/source-nodes/index.ts"],"sourcesContent":["import { Step } from \"./../../utils/run-steps\"\nimport fetchAndApplyNodeUpdates from \"./update-nodes/fetch-node-updates\"\n\nimport { fetchAndCreateAllNodes } from \"./fetch-nodes/fetch-nodes\"\n\nimport { LAST_COMPLETED_SOURCE_TIME } from \"~/constants\"\nimport { getStore, withPluginKey } from \"~/store\"\nimport fetchAndCreateNonNodeRootFields from \"./create-nodes/fetch-and-create-non-node-root-fields\"\nimport { allowFileDownloaderProgressBarToClear } from \"./create-nodes/create-remote-file-node/progress-bar-promise\"\nimport { sourcePreviews } from \"~/steps/preview\"\nimport { hasStatefulSourceNodes } from \"~/utils/gatsby-features\"\n\nconst sourceNodes: Step = async (helpers, pluginOptions) => {\n  const { cache, webhookBody, refetchAll, actions } = helpers\n  const typePrefix = pluginOptions.schema?.typePrefix ?? ``\n\n  if (hasStatefulSourceNodes) {\n    actions.enableStatefulSourceNodes()\n  }\n\n  // fetch non-node root fields such as settings.\n  // For now, we're refetching them on every build\n  const nonNodeRootFieldsPromise = fetchAndCreateNonNodeRootFields()\n\n  // if this is a preview we want to process it and return early\n  if (webhookBody.token && webhookBody.userDatabaseId) {\n    await sourcePreviews(helpers)\n    await nonNodeRootFieldsPromise\n    return\n  }\n\n  const now = Date.now()\n\n  const prefixedSourceTimeKey = withPluginKey(LAST_COMPLETED_SOURCE_TIME)\n\n  const lastCompletedSourceTime =\n    webhookBody.refreshing && webhookBody.since\n      ? webhookBody.since\n      : await cache.get(prefixedSourceTimeKey)\n\n  const { schemaWasChanged } = getStore().getState().remoteSchema\n\n  const fetchEverything =\n    !lastCompletedSourceTime ||\n    refetchAll ||\n    // don't refetch everything in development\n    (process.env.NODE_ENV !== `development` &&\n      // and the schema was changed\n      schemaWasChanged)\n\n  // If this is an uncached build,\n  // or our initial build to fetch and cache everything didn't complete,\n  // pull everything from WPGQL\n  if (fetchEverything) {\n    await fetchAndCreateAllNodes()\n  }\n\n  // If we've already successfully pulled everything from WPGraphQL\n  // just pull the latest changes\n  else if (!fetchEverything) {\n    await fetchAndApplyNodeUpdates({\n      since: lastCompletedSourceTime,\n    })\n  }\n\n  await nonNodeRootFieldsPromise\n\n  allowFileDownloaderProgressBarToClear()\n  await helpers.cache.set(prefixedSourceTimeKey, now)\n\n  const { dispatch } = getStore()\n  dispatch.remoteSchema.setSchemaWasChanged(false)\n  dispatch.develop.resumeRefreshPolling()\n}\n\nexport { sourceNodes }\n"],"mappings":";;;;;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,WAAiB,GAAG,OAAOC,OAAO,EAAEC,aAAa,KAAK;EAAA;EAC1D,MAAM;IAAEC,KAAK;IAAEC,WAAW;IAAEC,UAAU;IAAEC;EAAQ,CAAC,GAAGL,OAAO;EAC3D,MAAMM,UAAU,sDAAGL,aAAa,CAACM,MAAM,2DAApB,uBAAsBD,UAAU,yEAAK,EAAC;EAEzD,IAAIE,sCAAsB,EAAE;IAC1BH,OAAO,CAACI,yBAAyB,EAAE;EACrC;;EAEA;EACA;EACA,MAAMC,wBAAwB,GAAG,IAAAC,wCAA+B,GAAE;;EAElE;EACA,IAAIR,WAAW,CAACS,KAAK,IAAIT,WAAW,CAACU,cAAc,EAAE;IACnD,MAAM,IAAAC,uBAAc,EAACd,OAAO,CAAC;IAC7B,MAAMU,wBAAwB;IAC9B;EACF;EAEA,MAAMK,GAAG,GAAGC,IAAI,CAACD,GAAG,EAAE;EAEtB,MAAME,qBAAqB,GAAG,IAAAC,oBAAa,EAACC,qCAA0B,CAAC;EAEvE,MAAMC,uBAAuB,GAC3BjB,WAAW,CAACkB,UAAU,IAAIlB,WAAW,CAACmB,KAAK,GACvCnB,WAAW,CAACmB,KAAK,GACjB,MAAMpB,KAAK,CAACqB,GAAG,CAACN,qBAAqB,CAAC;EAE5C,MAAM;IAAEO;EAAiB,CAAC,GAAG,IAAAC,eAAQ,GAAE,CAACC,QAAQ,EAAE,CAACC,YAAY;EAE/D,MAAMC,eAAe,GACnB,CAACR,uBAAuB,IACxBhB,UAAU;EACV;EACCyB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAM,aAAY;EACrC;EACAP,gBAAiB;;EAErB;EACA;EACA;EACA,IAAII,eAAe,EAAE;IACnB,MAAM,IAAAI,kCAAsB,GAAE;EAChC;;EAEA;EACA;EAAA,KACK,IAAI,CAACJ,eAAe,EAAE;IACzB,MAAM,IAAAK,yBAAwB,EAAC;MAC7BX,KAAK,EAAEF;IACT,CAAC,CAAC;EACJ;EAEA,MAAMV,wBAAwB;EAE9B,IAAAwB,yDAAqC,GAAE;EACvC,MAAMlC,OAAO,CAACE,KAAK,CAACiC,GAAG,CAAClB,qBAAqB,EAAEF,GAAG,CAAC;EAEnD,MAAM;IAAEqB;EAAS,CAAC,GAAG,IAAAX,eAAQ,GAAE;EAC/BW,QAAQ,CAACT,YAAY,CAACU,mBAAmB,CAAC,KAAK,CAAC;EAChDD,QAAQ,CAACE,OAAO,CAACC,oBAAoB,EAAE;AACzC,CAAC;AAAA"}