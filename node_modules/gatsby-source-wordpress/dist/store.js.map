{"version":3,"file":"store.js","names":["asyncLocalStorage","AsyncLocalStorage","STORE_MAP","Map","createStore","init","models","plugins","immerPlugin","wrapApiHook","hook","helpers","pluginOptions","typePrefix","schema","has","set","store","get","run","key","enableMapSet","getStore","alsStore","Error","snapshotContext","enterWith","getPluginKey","withPluginKey","str"],"sources":["../src/store.ts"],"sourcesContent":["import { RematchStore, init } from \"@rematch/core\"\nimport immerPlugin from \"@rematch/immer\"\nimport { enableMapSet } from \"immer\"\nimport models, { IRootModel } from \"./models\"\n\nimport { AsyncLocalStorage } from \"async_hooks\"\nimport { IPluginOptions } from \"./models/gatsby-api\"\nimport { GatsbyNodeApiHelpers } from \"./utils/gatsby-types\"\n\nexport interface IGatsbyApiHook {\n  (helpers: GatsbyNodeApiHelpers, pluginOptions: IPluginOptions): Promise<void>\n}\n\nexport type Store = RematchStore<IRootModel, Record<string, never>>\n\nexport interface IStoreData {\n  store: Store\n  key: string\n}\n\nexport const asyncLocalStorage = new AsyncLocalStorage<IStoreData>()\n\nconst STORE_MAP = new Map<string, Store>()\n\nexport const createStore = (): Store =>\n  init({\n    models,\n    plugins: [immerPlugin<IRootModel>()],\n  })\n\n/**\n * Wraps the API hook with the async local storage context\n */\n\nexport const wrapApiHook =\n  (hook: IGatsbyApiHook): IGatsbyApiHook =>\n  async (helpers, pluginOptions) => {\n    const typePrefix = pluginOptions.schema?.typePrefix ?? ``\n\n    if (!STORE_MAP.has(typePrefix)) {\n      STORE_MAP.set(typePrefix, createStore())\n    }\n\n    const store = STORE_MAP.get(typePrefix)\n\n    return asyncLocalStorage.run({ store, key: typePrefix }, async () =>\n      hook(helpers, pluginOptions)\n    )\n  }\n\nenableMapSet()\n\nexport const getStore = (): Store => {\n  const alsStore = asyncLocalStorage.getStore()\n  if (!alsStore) {\n    throw new Error(`Store not found`)\n  }\n  return alsStore.store\n}\n\nexport const snapshotContext = (): (() => void) => {\n  const alsStore = asyncLocalStorage.getStore()\n  return (): void => asyncLocalStorage.enterWith(alsStore)\n}\n\nexport const getPluginKey = (): string => asyncLocalStorage.getStore().key\n\nexport const withPluginKey = (str: string): string => `${getPluginKey()}-${str}`\n\nexport default getStore\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AAEA;AAeO,MAAMA,iBAAiB,GAAG,IAAIC,8BAAiB,EAAc;AAAA;AAEpE,MAAMC,SAAS,GAAG,IAAIC,GAAG,EAAiB;AAEnC,MAAMC,WAAW,GAAG,MACzB,IAAAC,UAAI,EAAC;EACHC,MAAM,EAANA,eAAM;EACNC,OAAO,EAAE,CAAC,IAAAC,cAAW,GAAc;AACrC,CAAC,CAAC;;AAEJ;AACA;AACA;AAFA;AAIO,MAAMC,WAAW,GACrBC,IAAoB,IACrB,OAAOC,OAAO,EAAEC,aAAa,KAAK;EAAA;EAChC,MAAMC,UAAU,sDAAGD,aAAa,CAACE,MAAM,2DAApB,uBAAsBD,UAAU,yEAAK,EAAC;EAEzD,IAAI,CAACX,SAAS,CAACa,GAAG,CAACF,UAAU,CAAC,EAAE;IAC9BX,SAAS,CAACc,GAAG,CAACH,UAAU,EAAET,WAAW,EAAE,CAAC;EAC1C;EAEA,MAAMa,KAAK,GAAGf,SAAS,CAACgB,GAAG,CAACL,UAAU,CAAC;EAEvC,OAAOb,iBAAiB,CAACmB,GAAG,CAAC;IAAEF,KAAK;IAAEG,GAAG,EAAEP;EAAW,CAAC,EAAE,YACvDH,IAAI,CAACC,OAAO,EAAEC,aAAa,CAAC,CAC7B;AACH,CAAC;AAAA;AAEH,IAAAS,oBAAY,GAAE;AAEP,MAAMC,QAAQ,GAAG,MAAa;EACnC,MAAMC,QAAQ,GAAGvB,iBAAiB,CAACsB,QAAQ,EAAE;EAC7C,IAAI,CAACC,QAAQ,EAAE;IACb,MAAM,IAAIC,KAAK,CAAE,iBAAgB,CAAC;EACpC;EACA,OAAOD,QAAQ,CAACN,KAAK;AACvB,CAAC;AAAA;AAEM,MAAMQ,eAAe,GAAG,MAAoB;EACjD,MAAMF,QAAQ,GAAGvB,iBAAiB,CAACsB,QAAQ,EAAE;EAC7C,OAAO,MAAYtB,iBAAiB,CAAC0B,SAAS,CAACH,QAAQ,CAAC;AAC1D,CAAC;AAAA;AAEM,MAAMI,YAAY,GAAG,MAAc3B,iBAAiB,CAACsB,QAAQ,EAAE,CAACF,GAAG;AAAA;AAEnE,MAAMQ,aAAa,GAAIC,GAAW,IAAc,GAAEF,YAAY,EAAG,IAAGE,GAAI,EAAC;AAAA;AAAA,eAEjEP,QAAQ;AAAA"}